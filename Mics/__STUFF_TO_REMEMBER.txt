Static C:
=========

- static global variables -> not accessible outside of source file
- static functions -> not accessible outside source file
- static local variabes -> like global variables (global scope) with local visibility

Static in C++
=============

- static class variables -> are class variables, 
- Classes can also have static member functions.

Important in C++
================

Default constructor	       C::C();
Destructor	               C::~C();
Copy constructor	       C::C (const C&);
Copy assignment	           C& operator= (const C&);
Move constructor	       C::C (C&&);
Move assignment	           C& operator= (C&&);


-> Default copy constructor is present in C++ (which just copy all the members, recall details) ==> shallow copy (pointer are same)

-> copy assignment => overload = operator for to perform as copy constructor  (a = b)

-> Always remember during AND if first is not TRUE second is not evaluated can be used in NULL case i.e. chance of null pointer exception in second

Polymorhism in C++
==================

Virtual functions:-> it help in polymorhism e.g. we can call the instance class function using pointer to base class

  Polygon * ppoly1 = &rect;
  Polygon * ppoly2 = &trgl;
  Polygon * ppoly3 = &poly;
  cout << ppoly1->area() << '\n';
  cout << ppoly2->area() << '\n';
  cout << ppoly3->area() << '\n';

If not virtual only base class function called. A class that declares or inherits a virtual function is called a polymorphic class.

Abstract Base Class
====================

virtual member functions without definition (known as pure virtual functions)

Notice that area has no definition; this has been replaced by =0, which makes it a pure virtual function. Classes that contain at least one pure virtual function are known as abstract base classes.

Abstract base classes cannot be used to instantiate objects. Therefore, this last abstract base class version of Polygon could not be used to declare objects like:

Polygon mypolygon; [NOT OK]

But OK (below)

Polygon * ppoly1;


Symbol Tables
=============

key - value (like DNS lookup)

Hashing
=======

-> storing and retrieving information as fast as possible.

-> Mapping keys to location is called hashing.

4 components of hashing

- hash table
- hash function
- collisions
- collision resolution technique

Treees
=======

Worst case binary search tree is O(n) because a BST could degenerate to linked list

-> Binary Tree vs Binary Search Tree
-> Balanced vs Unbalanced
-> Full vs Complete 
	=> full = each node has 2 childeren or no children and leaf are at same level
	=> complete = no spot left in middle
	=> strict = each node has 2 childeren or no children

Representation of Generic Trees
-------------------------------

struct treeNode {
	int data;
	struct treeNode * firstChild;
	struct treeNode * nextSiblings;
}

  A
  /
 /
B--->C--->D--->E--->G
     /         /
    /         /
   H--->I     X


Balanced Tree
-------------

We keep restriction on heights to reduce worst case complexity to O(logn)

Heighted Balanced trees are represented as HB(k) where k = difference between left subtree height and right subtree height.

AVL Tree
--------
Binary search tree HB(k) if k = 1
- Is a BST
- For every node height of left and right differ by may 1

Standard Template Library
=========================

containers and iterators
containers -> is an object that represents a group of elements of a certain type, stored in a way that depends on the type of container (i.e., array, linked list, etc.)
iterators -> is a pointer-like object (that is, an object that supports pointer operations) that is able to "point" to a specific element in the container.

STL - generic type of container

vector	Array
list	Doubly-linked list
slist	Singly-linked list
queue	FIFO (first-in, first-out) structure
deque	Array-like structure, with efficient insertion and removal at both ends
set  	Set of unique elements
stack	LIFO (last in, first out) structure

Relationship
============

Composition Relationships
-------------------------

Each instance of type Circle seems to contain an instance of type Point. Represented with black solid <> (head on circle). Composition relationships are a strong form of containment or aggregation
Composition also indicates that the lifetime of Point is dependent upon Circle. This means that if Circle is destroyed, Point will be destroyed with it.