Symbol Tables
=============

key - value (like DNS lookup)

Hashing
=======

-> storing and retrieving information as fast as possible.

-> Mapping keys to location is called hashing.

4 components of hashing

- hash table
- hash function
- collisions
- collision resolution technique

Treees
=======

Worst case binary search tree is O(n) because a BST could degenerate to linked list

-> Binary Tree vs Binary Search Tree
-> Balanced vs Unbalanced
-> Full vs Complete 
	=> full = each node has 2 childeren or no children and leaf are at same level
	=> complete = no spot left in middle
	=> strict = each node has 2 childeren or no children

Representation of Generic Trees
-------------------------------

struct treeNode {
	int data;
	struct treeNode * firstChild;
	struct treeNode * nextSiblings;
}

  A
  /
 /
B--->C--->D--->E--->G
     /         /
    /         /
   H--->I     X


Balanced Tree
-------------

We keep restriction on heights to reduce worst case complexity to O(logn)

Heighted Balanced trees are represented as HB(k) where k = difference between left subtree height and right subtree height.

AVL Tree
--------
Binary search tree HB(k) if k = 1
- Is a BST
- For every node height of left and right differ by may 1

Standard Template Library
=========================

containers and iterators
containers -> is an object that represents a group of elements of a certain type, stored in a way that depends on the type of container (i.e., array, linked list, etc.)
iterators -> is a pointer-like object (that is, an object that supports pointer operations) that is able to "point" to a specific element in the container.

STL - generic type of container

vector	Array
list	Doubly-linked list
slist	Singly-linked list
queue	FIFO (first-in, first-out) structure
deque	Array-like structure, with efficient insertion and removal at both ends
set  	Set of unique elements
stack	LIFO (last in, first out) structure
